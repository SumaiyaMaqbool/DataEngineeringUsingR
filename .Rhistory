value=c( rnorm(500, 10, 5), rnorm(500, 13, 1), rnorm(500, 18, 1), rnorm(20, 25, 4), rnorm(100, 12, 1) )
)
# Plot
data %>%
ggplot( aes(x=name, y=value, fill=name)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("A boxplot with jitter") +
xlab("")
# Boxplot basic
data %>%
ggplot( aes(x=name, y=value, fill=name)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6, option="A") +
theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("Basic boxplot") +
xlab("")
# Violin basic
data %>%
ggplot( aes(x=name, y=value, fill=name)) +
geom_violin() +
scale_fill_viridis(discrete = TRUE, alpha=0.6, option="A") +
theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("Violin chart") +
xlab("")
#-------------------------------------------------------
# Charge libraries:
library(ggplot2)
library(gganimate)
# Get data:
library(gapminder)
# Make a ggplot, but add frame=year: one image per year
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, color = continent)) +
geom_point() +
scale_x_log10() +
theme_bw() +
# gganimate specific bits:
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(year) +
ease_aes('linear')
# Save at gif:
anim_save("271-ggplot2-animated-gif-chart-with-gganimate1.gif")
# Make a ggplot, but add frame=year: one image per year
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
facet_wrap(~continent) +
# Here comes the gganimate specific bits
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(year) +
ease_aes('linear')
# Save at gif:
anim_save("271-ggplot2-animated-gif-chart-with-gganimate2.gif")
moxbuller = function(n) {
u = runif(n)
v = runif(n)
x = cos(2*pi*u)*sqrt(-2*log(v))
y = sin(2*pi*v)*sqrt(-2*log(u))
r = list(x=x, y=y)
return(r)
}
r = moxbuller(50000)
par(bg="black")
par(mar=c(0,0,0,0))
plot(r$x,r$y, pch=".", col="blue", cex=1.2)
moxbuller = function(n) {
u = runif(n)
v = runif(n)
x = cos(2*pi*u)*sqrt(-2*log(v))
y = sin(2*pi*v)*sqrt(-2*log(u))
r = list(x=x, y=y)
return(r)
}
r = moxbuller(50000)
par(bg="black")
par(mar=c(0,0,0,0))
plot(r$x,r$y, pch=".", col="blue", cex=1.2)
#Data Engineering Day 3
df1= Admitted
df2= Enrolled
#Data Engineering Day 3
df1<-data.frame(c('ID','Name','Perc'))
df1<-edit()
df1.edit()
df1<-edit(df1)
#Data Engineering Day 3
df1<-data.frame(c('ID','Name','Perc'))
df1<-edit(df1)
#Data Engineering Day 3
df1<-data.frame(c('ID','Name','Perc'))
df1<-edit(df1)
df1<-edit(df1)
#Data Engineering Day 3
df1<-data.frame(c('ID','Name','Perc'))
df1<-edit(df1)
data.frame
names(df1) = data.frame(cbind('ID','Name','Perc'))
View(df1)
df1<-edit(df1)
#Data Engineering Day 3
df1<-data.frame(c('ID','Name','Perc'))
df1<-edit(df1)
df1<-data.frame(cbind('ID','Name','Perc'))
df1<-edit(df1)
df1=data.frame(cbind('ID','Name','Perc'))
df1<-edit(df1)
df1<-edit(df1)
View(df1)
df2= Enrolled
names(df1)=c('ID','Name','Perc')
View(df1)
df2= data.frame(cbind('ID'=5))
View(df2)
View(df1)
df2= data.frame(cbind('ID'=5))
View(df2)
df2= data.frame(cbind('ID'=2,'Status'='Enrolled','Year'=4))
View(df2)
#-----------------------------------
#df1
ID = c(1:3)
Name= c('Ali','Bader','Saif')
Perce= c(87,56,77)
df1= data.frame('ID'=ID,'Name'=Name,'Perce'=Perce)
(df1)
df2=dtat.frame(
'ID' = c(2:5),
'Status'= c('Grd','Grd','Enr','Enr')
'Year'= c(3,5,2,1)
)
df2=dtat.frame(
'ID' = c(2:5),
'Status'= c('Grd','Grd','Enr','Enr'),
'Year'= c(3,5,2,1)
)
df2=data.frame(
'ID' = c(2:5),
'Status'= c('Grd','Grd','Enr','Enr'),
'Year'= c(3,5,2,1)
)
View(df2)
#Merging Data Frames------
total <- merge(df1,df2,by='ID')
total
View(total)
#------------------------------------------
mydata = data.frame(Titanic)
View(mydata)
newdata<- mydata[which(Sex=='Male'$ Survived==0),]
newdata<- mydata[which(Sex=='Male'& Survived==0),]
newdata<- mydata[which(Sex=='Male'& Survived==1),]
newdata<- mydata[which(Sex=='Male'& Survived=='Yes'),]
newdata<- mydata[which(mydata$Sex=='Male'& mydata$Survived=='Yes'),]
newdata
newdata<- mydata[which(mydata$Class=='Crew'& mydata$Survived=='Yes'),]
newdata
newdata<- subset(newdata,mydata$Class=='Crew'& mydata$Survived=='Yes',
select=c(Class,Survived))
newdata
newdata<- subset(mydata,mydata$Class=='Crew'& mydata$Survived=='Yes',
select=c(Class,Survived))
newdata
View(mydata)
newdata<- mydata[which(mydata$Age=='Child'& mydata$Survived=='Yes'),]
newdata<- mydata[which(mydata$Age=='Child'& mydata$Survived=='Yes'),]
newdata
newdata<- subset(mydata,mydata$Age=='Crew'& mydata$Survived=='Yes' & mydata$Sex=='Female'  ,
select=c(Sex,Age,Survived))
newdata
newdata<- subset(mydata,mydata$Age=='Child'& mydata$Survived=='Yes' & mydata$Sex=='Female'  ,
select=c(Sex,Age,Survived))
newdata
# Random Samples
mysample<- mydata[sample(1:nrow(mydata),50,replace=True]
# Random Samples
mysample<- mydata[sample(1:nrow(mydata),50,replace=True),]
# Random Samples
mysample<- mydata[sample(1:nrow(mydata),50,replace=TRUE),]
mysample
# Random Samples
mysample<- mydata[sample(1:nrow(mydata),32,replace=FALSE),]
mysample
# Random Samples (FALSE)=without replacement
mysample<- mydata[sample(1:nrow(mydata),32,replace=FALSE),]
mysample
mysample<- mydata[sample(1:nrow(mydata),50,replace=TRUE),]
mysample
#using SQL statement to manipulate data frame ---
library(sqldf)
install.packages("sqldf")
#using SQL statement to manipulate data frame ---
library(sqldf)
newdf <- sqldf("select * from mydata where Class="3rd" order by Freq)
newdf <- sqldf("select * from mydata where Class='3rd' order by Freq)
newdf <- sqldf("select * from mydata where Class='3rd' order by Freq)
newdf
newdf <- sqldf("select * from mydata where Class='3rd' order by Freq",row.names=TRUE)
newdf
TotalMark <- 88
if (TotalMark<=100&TotalMark=>90){
print("A")
}else if(TotalMark<=89&TotalMark=>80){
print("B")
}else if(TotalMark<=79&TotalMark=>70){
print("C")
}else if(TotalMark<=69&TotalMark=>50){
print("E")
}else {
print("F")
}
if (TotalMark<=100& TotalMark=>90){
print("A")
}else if(TotalMark<=89 & TotalMark=>80){
print("B")
}else if(TotalMark<=79 & TotalMark=>70){
print("C")
}else if(TotalMark<=69 & TotalMark=>50){
print("E")
}else{
print("F")
}
TotalMark <- 88
if (TotalMark<=100 | TotalMark=>90){
print("A")
}else if(TotalMark<=89 | TotalMark=>80){
print("B")
}else if(TotalMark<=79 | TotalMark=>70){
print("C")
}else if(TotalMark<=69 | TotalMark=>50){
print("E")
}else{
print("F")
}
TotalMark <- 88
if (TotalMark<=100 | TotalMark=>90){
print("A")
}
TotalMark <- 88
TotalMark <- 88
if (TotalMark<=100 | TotalMark=>90){
print("A")
}
TotalMark <- 88
if (TotalMark<=100 | TotalMark=>90){print("A")}
TotalMark <- 88
if (TotalMark<=100 | TotalMark>=90){print("A")}
else if(TotalMark<=89 | TotalMark=>80){print("B")}
else if(TotalMark<=79 | TotalMark=>70){print("C")}
else if(TotalMark<=69 | TotalMark=>50){print("E")}
TotalMark <- 88
if (TotalMark>=90){print("A")}
else if(TotalMark>=80){print("B")}
else if(TotalMark>=70){print("C")}
else if(TotalMark>=50){print("E")}
else{print("F")}
TotalMark <- 88
if (TotalMark>=90){
print("A")
} else if(TotalMark>=80){
print("B")
} else if(TotalMark>=70){
print("C")
} else if(TotalMark>=50){
print("E")
} else{print("F")}
TotalMark <- 88
if (TotalMark<=100&TotalMark>=90){
print("A")
} else if(TotalMark<=89.9&TotalMark>=80){
print("B")
} else if(TotalMark<=79.9&TotalMark>=70){
print("C")
} else if(TotalMark<=69.9&TotalMark>=60){
print("D")
} else if(TotalMark<=59.9&TotalMark>=50){
print("E")
} else{print("F")}
TotalMark <- 88.9
if (TotalMark<=100&TotalMark>=90){
print("A")
} else if(TotalMark<=89.9&TotalMark>=80){
print("B")
} else if(TotalMark<=79.9&TotalMark>=70){
print("C")
} else if(TotalMark<=69.9&TotalMark>=60){
print("D")
} else if(TotalMark<=59.9&TotalMark>=50){
print("E")
} else{print("F")}
TotalMark <- 8.9
if (TotalMark<=100&TotalMark>=90){
print("A")
} else if(TotalMark<=89.9&TotalMark>=80){
print("B")
} else if(TotalMark<=79.9&TotalMark>=70){
print("C")
} else if(TotalMark<=69.9&TotalMark>=60){
print("D")
} else if(TotalMark<=59.9&TotalMark>=50){
print("E")
} else{print("F")}
TotalMark <- 89.5
if (TotalMark<=100&TotalMark>=90){
print("A")
} else if(TotalMark<=89.9&TotalMark>=80){
print("B")
} else if(TotalMark<=79.9&TotalMark>=70){
print("C")
} else if(TotalMark<=69.9&TotalMark>=60){
print("D")
} else if(TotalMark<=59.9&TotalMark>=50){
print("E")
} else{print("F")}
TotalMark <- 76
if (TotalMark<=100&TotalMark>=90){
print("A")
} else if(TotalMark<=89.9&TotalMark>=80){
print("B")
} else if(TotalMark<=79.9&TotalMark>=70){
print("C")
} else if(TotalMark<=69.9&TotalMark>=60){
print("D")
} else if(TotalMark<=59.9&TotalMark>=50){
print("E")
} else{print("F")}
number_one= as.integer(readline(prompt ="Enter the first number"))
number_one= as.integer(readline(prompt ="Enter the first number: "))
number_two= as.integer(readline(prompt ="Enter the second number: "))
sumNum=0
while (number_one<=number_two){
sumNum=number_one*number_two
print(sumNum)
}
#---------------------------------------------------
#for loop
mat <- matrix(1:25,nrow =5)
for (row in 1:nrow(mat)){
for (col in 1:ncol(mat)){
print(paste('The element at row:',row,'and col:',col,'is',mat[row,col]))
}
}
add_num(4,5)
add_num<-function(num1,num2){
print(num1+num2)
}
add_num(4,5)
x=add_num(4,5)
x
#---------------------------
#Exercise
#Write a function to find the mean and sd of a numeric variable
vec = rnorm(10)
vec
#---------------------------
#Exercise
#Write a function to find the mean and sd of a numeric variable
vec = as.integer.rnorm(10)
#---------------------------
#Exercise
#Write a function to find the mean and sd of a numeric variable
vec = as.integer(rnorm(10))
vec
#---------------------------
#Exercise
#Write a function to find the mean and sd of a numeric variable
vec = as.integer(rnorm(10))
vec
#---------------------------
#Exercise
#Write a function to find the mean and sd of a numeric variable
vec = as.integer(rnorm(10))
vec
mean_sd <- function(vec){
print('The mean of vec: ',mean(vec))
print('The std of vec: '), std(vec)
}
print('The std of vec: '),std(vec))}
print('The std of vec: ',std(vec))}
#---------------------------
#Exercise
#Write a function to find the mean and sd of a numeric variable
vec = as.integer(rnorm(10))
vec
mean_sd <- function(vec){
print('The mean of vec: ',mean(vec))
print('The std of vec: ',std(vec))
}
#---------------------------
#Exercise
#Write a function to find the mean and sd of a numeric variable
vec = as.integer(rnorm(10))
vec
mean_sd <- function(vec){
Mean= mean(vec)
STD = std(vec)
print('The mean of vec: ',Mean)
print('The std of vec: ',STD)
}
#---------------------------
#Exercise
#Write a function to find the mean and sd of a numeric variable
mean_sd <- function(vec){
Mean= mean(vec)
STD = std(vec)
print('The mean of vec: ',Mean)
print('The std of vec: ',STD)
}
vec = as.integer(rnorm(10))
mean_sd(vec)
#---------------------------
#Exercise
#Write a function to find the mean and sd of a numeric variable
mean_sd <- function(vec){
Mean= mean(vec)
SD = sd(vec)
print('The mean of vec: ',Mean)
print('The std of vec: ',STD)
}
vec = as.integer(rnorm(10))
mean_sd(vec)
#---------------------------
#Exercise
#Write a function to find the mean and sd of a numeric variable
mean_sd <- function(vec){
Mean= mean(vec)
SD = sd(vec)
print('The mean of vec: ',Mean)
print('The std of vec: ',SD)
}
vec = as.integer(rnorm(10))
mean_sd(vec)
#---------------------------
#Exercise
#Write a function to find the mean and sd of a numeric variable
mean_sd <- function(vec){
Mean= mean(vec)
SD = sd(vec)
print('The mean of vec: ',mean(vec))
print('The std of vec: ',sd(vec))
}
vec = as.integer(rnorm(10))
mean_sd(vec)
#---------------------------
#Exercise
#Write a function to find the mean and sd of a numeric variable
mean_sd <- function(vec){
Mean= mean(vec)
SD = sd(vec)
print('The mean of vec: ',mean(vec))
print('The std of vec: ',sd(vec))
}
vec = as.integer(rnorm(10))
mean_sd(vec)
#---------------------------
#Exercise
#Write a function to find the mean and sd of a numeric variable
mean_sd <- function(vec){
Mean= mean(vec)
SD = sd(vec)
return('The mean of vec: ',mean(vec))
return('The std of vec: ',sd(vec))
}
vec = as.integer(rnorm(10))
mean_sd(vec)
#---------------------------
#Exercise
#Write a function to find the mean and sd of a numeric variable
mean_sd <- function(vec){
Mean= mean(vec)
SD = sd(vec)
return(mean(vec))
return(sd(vec))
}
vec = as.integer(rnorm(10))
mean_sd(vec)
#---------------------------
#Exercise
#Write a function to find the mean and sd of a numeric variable
mean_sd <- function(vec){
Mean= mean(vec)
SD = sd(vec)
return(mean(vec),sd(vec))
}
vec = as.integer(rnorm(10))
mean_sd(vec)
#---------------------------
#Exercise
#Write a function to find the mean and sd of a numeric variable
mean_sd <- function(vec){
print (mean(vec))
print(sd(vec))
}
vec = as.integer(rnorm(10))
mean_sd(vec)
#---------------------------------------
pairs(Titanic)
